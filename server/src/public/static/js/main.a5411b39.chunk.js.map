{"version":3,"sources":["pages/Chat/styles.js","pages/Chat/index.js","styles/global.js","App.js","index.js"],"names":["ModalContainer","styled","div","Modal","Header","header","Container","props","blur","ChatBox","Message","InputContainer","form","Input","input","Button","button","socket","io","connect","document","URL","Chat","messagesEndRef","useRef","useState","messages","setMessages","message","setMessage","username","setUsername","usernameError","setUsernameError","hasUsername","setHasUsername","online","setOnline","scrollToBottom","current","scrollIntoView","useEffect","on","data","map","msg","i","key","author","content","ref","onSubmit","e","preventDefault","emit","placeholder","value","onChange","target","color","type","GlobalStyle","createGlobalStyle","App","ReactDOM","render","getElementById"],"mappings":"2vGAEO,IAAMA,EAAiBC,IAAOC,IAAV,KAQdC,EAAQF,IAAOC,IAAV,KA6BLE,EAASH,IAAOI,OAAV,KAiBNC,EAAYL,IAAOC,IAAV,KAMlB,SAAAK,GAAK,OAAMA,EAAMC,KAA6B,GAAtB,uBAGfC,EAAUR,IAAOC,IAAV,KAmBPQ,EAAUT,IAAOC,IAAV,KAmBPS,EAAiBV,IAAOW,KAAV,KAWdC,EAAQZ,IAAOa,MAAV,KAWLC,EAASd,IAAOe,OAAV,KCtHbC,EAASC,IAAGC,QAAQC,SAASC,KAEpB,SAASC,IACtB,IAAMC,EAAiBC,iBAAO,MADD,EAGGC,mBAAS,IAHZ,mBAGtBC,EAHsB,KAGZC,EAHY,OAICF,mBAAS,IAJV,mBAItBG,EAJsB,KAIbC,EAJa,OAKGJ,mBAAS,IALZ,mBAKtBK,EALsB,KAKZC,EALY,OAMaN,oBAAS,GANtB,mBAMtBO,EANsB,KAMPC,EANO,OAOSR,oBAAS,GAPlB,mBAOtBS,EAPsB,KAOTC,EAPS,OAQDV,mBAAS,GARR,mBAQtBW,EARsB,KAQdC,EARc,KAUvBC,EAAiB,WACrBf,EAAegB,QAAQC,kBAkCzB,OA/BAC,qBAAU,WACRH,IACArB,EAAOyB,GAAG,aAAa,SAAAC,GACrBhB,EAAYgB,MAEd1B,EAAOyB,GAAG,cAAc,SAAAC,GACtBhB,EAAY,GAAD,mBAAKD,GAAL,CAAeiB,KAC1BL,OAEFrB,EAAOyB,GAAG,UAAU,SAAAC,GAAI,OAAIN,EAAUM,SAuBtC,oCACE,kBAACvC,EAAD,KACE,2BACE,2CADF,2BAGA,4CAAkBgC,IAEpB,kBAAC9B,EAAD,CAAWE,KAAM0B,GACf,kBAACzB,EAAD,KACGiB,EAASkB,KAAI,SAACC,EAAKC,GAAN,OACZ,kBAACpC,EAAD,CAASqC,IAAKD,GACZ,gCAASD,EAAIG,QACb,2BAAIH,EAAII,aAGZ,yBAAKC,IAAK3B,KAEZ,kBAACZ,EAAD,CAAgBwC,SArCtB,SAAsBC,GAEpB,GADAA,EAAEC,iBACEnB,EAAa,CACf,IAAMS,EAAO,CACXK,OAAQlB,EACRmB,QAASrB,GAEXD,EAAY,GAAD,mBAAKD,GAAL,CAAeiB,KAC1B1B,EAAOqC,KAAK,cAAeX,GAC3Bd,EAAW,IACXS,OA4BI,kBAACzB,EAAD,CACE0C,YAAY,sBACZC,MAAO5B,EACP6B,SAAU,SAAAL,GAAC,OAAIvB,EAAWuB,EAAEM,OAAOF,QACnCG,MAAM,YAER,kBAAC5C,EAAD,CAAQ6C,KAAK,UACX,kBAAC,IAAD,UAIJ1B,GACA,kBAAClC,EAAD,KACE,kBAACG,EAAD,KACE,0EACA,0BAAMgD,SAxChB,SAA2BC,GACzBA,EAAEC,iBACe,KAAbvB,EAAiBK,GAAe,GAC/BF,GAAiB,KAsCZ,kBAACpB,EAAD,CAAO0C,YAAY,kBAAkBC,MAAO1B,EAAU2B,SAAU,SAAAL,GAAC,OAAIrB,EAAYqB,EAAEM,OAAOF,UAC1F,kBAACzC,EAAD,CAAQ6C,KAAK,UACX,kBAAC,IAAD,QAGH5B,GAAiB,2D,wXC5F9B,IAkBe6B,EAlBKC,YAAH,KCaFC,MATf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAACzC,EAAD,QCLN0C,IAASC,OAAO,kBAAC,EAAD,MAAS7C,SAAS8C,eAAe,W","file":"static/js/main.a5411b39.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const ModalContainer = styled.div`\n  padding: 20px;\n  width: 100vw;\n  display: flex;\n  justify-content: center;\n  position: fixed;\n`;\n\nexport const Modal = styled.div`\n  position: fixed;\n  width: 90%;\n  top: 40%;\n  max-width: 400px;\n  padding: 25px;\n  background-color: #7819c1;\n  text-align: center;\n  color: #eee;\n  border-radius: 5px;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n  & > span {\n    color: #fff;\n    font-size: 12px;\n  }\n  & > form {\n    margin-top: 10px;\n    display: grid;\n    width: 100%;\n    grid-template-columns: 1fr 50px;\n    grid-template-rows: 1fr;\n    gap: 5px;\n    & > button {\n      background-color: #fff;\n      color: #7819c1;\n    }\n  }\n`;\n\nexport const Header = styled.header`\n  height: 40px;\n  position: fixed;\n  top: 0;\n  color: #eee;\n  z-index: 1000;\n  padding: 10px;\n  width: 100%;\n  text-align: center;\n  background-color: #7819c1;\n  display: flex;\n  justify-content: space-between;\n  & > * {\n    font-size: 16px;\n  }\n`;\n\nexport const Container = styled.div`\n  padding: 20px;\n  width: 100%;\n  height: calc(100% - 40px);\n  background-color: #101019;\n  position: fixed;\n  ${props => (!props.blur ? \"filter: blur(3px)\" : \"\")}\n`;\n\nexport const ChatBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  height: 100%;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    display: block;\n    width: 5px;\n    height: 8px;\n    background-color: #101019; /* or add it to the track */\n  }\n  &::-webkit-scrollbar-thumb {\n    background: #7819c1;\n    border-radius: 2px;\n  }\n`;\n\nexport const Message = styled.div`\n  background: #2e2e2f;\n  color: #eee;\n  border-radius: 6px 6px 6px 0;\n  width: fit-content;\n  max-width: 99%;\n  margin-top: 5px;\n  padding: 6px;\n  font-size: 13px;\n  display: flex;\n  flex-direction: column;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  & > strong {\n    margin-bottom: 4px;\n    font-size: 15px;\n  }\n`;\n\nexport const InputContainer = styled.form`\n  background-color: #101019;\n  display: grid;\n  width: 100%;\n  grid-template-columns: 1fr 80px;\n  grid-template-rows: 1fr;\n  gap: 10px;\n  position: fixed;\n  padding: 5px 0s;\n`;\n\nexport const Input = styled.input`\n  height: 35px;\n  font-size: 16px;\n  padding: 7px 12px;\n  border-radius: 15px 15px 0px 15px;\n  margin: 10px 0;\n  border: none;\n  background-color: #fff;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n`;\n\nexport const Button = styled.button`\n  width: 35px;\n  height: 35px;\n  border-radius: 50%;\n  margin: 10px 5px;\n  border: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #7819c1;\n  color: #fff;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n`;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { MdSend } from \"react-icons/md\";\n\nimport io from \"socket.io-client\";\n\nimport { ModalContainer, Modal, Header, Container, ChatBox, Message, InputContainer, Input, Button } from \"./styles\";\n\nconst socket = io.connect(document.URL);\n\nexport default function Chat() {\n  const messagesEndRef = useRef(null);\n\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [usernameError, setUsernameError] = useState(false);\n  const [hasUsername, setHasUsername] = useState(false);\n  const [online, setOnline] = useState(0);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView();\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n    socket.on(\"bootstrap\", data => {\n      setMessages(data);\n    });\n    socket.on(\"newMessage\", data => {\n      setMessages([...messages, data]);\n      scrollToBottom();\n    });\n    socket.on(\"online\", data => setOnline(data));\n  });\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (hasUsername) {\n      const data = {\n        author: username,\n        content: message,\n      };\n      setMessages([...messages, data]);\n      socket.emit(\"sendMessage\", data);\n      setMessage(\"\");\n      scrollToBottom();\n    }\n  }\n  function handleSetUsername(e) {\n    e.preventDefault();\n    if (username !== \"\") setHasUsername(true);\n    else setUsernameError(true);\n  }\n\n  return (\n    <>\n      <Header>\n        <p>\n          <strong>Infozap</strong> por Vinicius Vassão\n        </p>\n        <p>Online agora: {online}</p>\n      </Header>\n      <Container blur={hasUsername}>\n        <ChatBox>\n          {messages.map((msg, i) => (\n            <Message key={i}>\n              <strong>{msg.author}</strong>\n              <p>{msg.content}</p>\n            </Message>\n          ))}\n          <div ref={messagesEndRef} />\n        </ChatBox>\n        <InputContainer onSubmit={handleSubmit}>\n          <Input\n            placeholder=\"Digite sua mensagem\"\n            value={message}\n            onChange={e => setMessage(e.target.value)}\n            color=\"#ffffff\"\n          />\n          <Button type=\"submit\">\n            <MdSend />\n          </Button>\n        </InputContainer>\n      </Container>\n      {!hasUsername && (\n        <ModalContainer>\n          <Modal>\n            <p>Insira um nome de usuário para continuar</p>\n            <form onSubmit={handleSetUsername}>\n              <Input placeholder=\"Digite seu nome\" value={username} onChange={e => setUsername(e.target.value)} />\n              <Button type=\"submit\">\n                <MdSend />\n              </Button>\n            </form>\n            {usernameError && <span>Não pode ser vazio!</span>}\n          </Modal>\n        </ModalContainer>\n      )}\n    </>\n  );\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n    font-family: \"Roboto\", sans-serif;\n    -webkit-font-smoothing: antialiased;\n  }\n  html, body, #root {\n    min-height: 100%;\n    background-color: #101019;\n  }\n  ::-webkit-scrollbar {\n    display: none\n  }\n`;\n\nexport default GlobalStyle;\n","import React from \"react\";\n\nimport Chat from \"./pages/Chat\";\n\nimport GlobalStyle from \"./styles/global\";\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <Chat />\n    </>\n  );\n}\n\nexport default App;\n","import \"dotenv/config\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}